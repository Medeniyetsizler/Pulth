// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    metaData MetaData?
    Article  Article[]

    Comment   Comment[]
    Comment   Comment?  @relation(fields: [commentId], references: [id])
    commentId String?   @db.ObjectId
}

model MetaData {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    user      User   @relation(fields: [userId], references: [id])
    follows   Int    @default(0)
    followers Int    @default(0)
    userId    String @unique @db.ObjectId
}

model VerificationToken {
    // im not hundred percent sure this is the right way to do this
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Article {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    title         String
    description   String
    createdAt     DateTime
    updatedAt     DateTime
    editorVersion String
    bodyData      Json

    authorId String @db.ObjectId
    author   User   @relation(fields: [authorId], references: [id])

    Comments Comment[]

    rate       Int
    ratedbyIds String[] @db.ObjectId
    ratedby    User[]   @relation("ratedby", fields: [ratedbyIds], references: [id])
}

// recursive comment Model
model Comment {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    authorId String @db.ObjectId
    author   User   @relation(fields: [authorId], references: [id])

    Article   Article? @relation(fields: [articleId], references: [id])
    articleId String?  @db.ObjectId

    content String

    rate       Int
    ratedbyIds String[] @db.ObjectId
    ratedby    User[]   @relation("ratedby", fields: [ratedbyIds], references: [id])

    childDepth Int
    parentId   String?  @db.ObjectId
    parent     Comment? @relation("parent", fields: [parentId], references: [id])
}
