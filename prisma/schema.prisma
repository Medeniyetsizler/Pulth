generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    description   String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    Articles Article[] @relation("ArticleAuthor")
    // votedArticles Article[] @relation("ArticleVoters", fields: [voterIds], references: [id])
    Comments Comment[] @relation("AuthorUser")

    ratedCommentsId String[]  @db.ObjectId
    // im not hundred percent sure this is the right way to do this
    ratedComments   Comment[] @relation("RatedUser", fields: [ratedCommentsId], references: [id])
    images          Image[]
    votedTo         VotedBy[] @relation("ArticleVotes")

    // list of users that follow this user
    followers Follow[] @relation("Follower")
    // list of users that this user follows
    following Follow[] @relation("Following")

    // list of tags this user is assigned
    assignedTags TagsOnPosts[]
}

model VerificationToken {
    // im not hundred percent sure this is the right way to do this
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Article {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    author   User   @relation("ArticleAuthor", fields: [authorId], references: [id])
    authorId String @db.ObjectId

    title         String
    description   String
    slug          String   @unique
    bodyData      Json
    draftBodyData Json?
    isPublished   Boolean  @default(false)
    keywords      String[] @default([])

    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    editorVersion String?

    // artifical field for the frontend
    // this is the number of votes the article has received so far (upvotes - downvotes)
    // voteRank Int       @default(0)
    votes VotedBy[] @relation("ArticleVotes")

    Comments Comment[]
    tags     TagsOnPosts[]
}

// recursive comment Model
model Comment {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId
    authorId String  @db.ObjectId
    author   User    @relation("AuthorUser", fields: [authorId], references: [id], onDelete: Cascade)
    isEdited Boolean @default(false)

    articleId String  @db.ObjectId
    Article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

    content String

    rating     Int      @default(0)
    ratedbyIds String[] @default([]) @db.ObjectId
    ratedby    User[]   @relation("RatedUser", fields: [ratedbyIds], references: [id])

    // list of parent comments ordered by how deep they are
    // the first element is the parent comment
    // the last element is the root comment
    parentIds      String[]  @db.ObjectId
    parentComments Comment[] @relation("Comments", fields: [parentIds], references: [id])
    childIds       String[]  @db.ObjectId
    childComments  Comment[] @relation("Comments", fields: [childIds], references: [id])

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tag {
    id       String        @id @default(auto()) @map("_id") @db.ObjectId
    name     String        @unique
    color    String        @default("#000000")
    articles TagsOnPosts[]
}

model TagsOnPosts {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    article   Article @relation(fields: [articleId], references: [id])
    articleId String  @db.ObjectId // relation scalar field (used in the `@relation` attribute above)

    tag   Tag    @relation(fields: [tagId], references: [id])
    tagId String @db.ObjectId // relation scalar field (used in the `@relation` attribute above)

    // the user that assigned the tag to the post
    assignedAt   DateTime @default(now())
    assignedById String   @db.ObjectId
    assignedBy   User     @relation(fields: [assignedById], references: [id])

    @@unique([articleId, tagId])
}

model Image {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    url String
    alt String
}

model VotedBy {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId String @db.ObjectId
    user   User   @relation("ArticleVotes", fields: [userId], references: [id], onDelete: Cascade)

    articleId String  @db.ObjectId
    article   Article @relation("ArticleVotes", fields: [articleId], references: [id], onDelete: Cascade)

    upVote Boolean
}

model Follow {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    followerId  String @db.ObjectId
    follower    User   @relation("Follower", fields: [followerId], references: [id], onDelete: Cascade)
    followingId String @db.ObjectId
    following   User   @relation("Following", fields: [followingId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())

    @@unique([followerId, followingId])
}
