// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    description   String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    metaData MetaData?

    Articles Article[]
    Comments Comment[] @relation("AuthorUser")

    ratedCommentsId String[]  @db.ObjectId
    // im not hundred percent sure this is the right way to do this
    ratedComments   Comment[] @relation("RatedUser", fields: [ratedCommentsId], references: [id])
    images          Image[]
}

model MetaData {
    id        String @id @default(auto()) @map("_id") @db.ObjectId
    user      User   @relation(fields: [userId], references: [id])
    follows   Int    @default(0)
    followers Int    @default(0)
    userId    String @unique @db.ObjectId
}

model VerificationToken {
    // im not hundred percent sure this is the right way to do this
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verificationtokens")
}

model Article {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    author   User   @relation(fields: [authorId], references: [id])
    authorId String @db.ObjectId

    title       String
    description String
    slug        String   @unique
    bodyData    Json
    isPublished Boolean  @default(false)
    keywords    String[] @default([])

    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
    editorVersion String?

    Comments Comment[]
}

// recursive comment Model
model Comment {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    authorId String @db.ObjectId
    author   User   @relation("AuthorUser", fields: [authorId], references: [id], onDelete: Cascade)

    articleId String  @db.ObjectId
    Article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

    content String

    rating     Int      @default(0)
    ratedbyIds String[] @default([]) @db.ObjectId
    ratedby    User[]   @relation("RatedUser", fields: [ratedbyIds], references: [id])

    // NoAction might be a problem in the future :FUTURE_PROBLEM:
    // its the case for mongodb
    parent   Comment?  @relation("ParentChild", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
    children Comment[] @relation("ParentChild")
    parentId String?   @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Image {
    id String @id @default(auto()) @map("_id") @db.ObjectId

    userId String @db.ObjectId
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    url String
    alt String
}
