import type { NextPage } from "next";
import Head from "next/head";
import Link from "next/link";

import { useState } from "react";

import { createEditor, Transforms, Editor } from "slate";
import { Slate, Editable, withReact } from "slate-react";

// TypeScript users only add this code
import { BaseEditor, Descendant, Node } from "slate";
import { ReactEditor, useSlate } from "slate-react";

import { ElementTypes } from "../types/renderer";

import BlockRenderer from "../components/editor/blockRenderer";

const initialValue = [
  {
    type: "paragraph",
    children: [
      {
        text: "A line of text in a paragraph.",
      },
    ],
  },
] as Descendant[];

const EditorPage: NextPage = () => {
  const [editor] = useState<BaseEditor & ReactEditor>(() =>
    withReact(createEditor())
  );

  const serialize = (value: Descendant[]) => {
    return (
      value
        // Return the string content of each paragraph in the value's children.
        .map((n: Descendant) => JSON.stringify(n))
        // Join them all with line breaks denoting paragraphs.
        .join("\n")
    );
  };

  const getDocument = () => Array.from(Node.elements(editor));
  const getFocusedElement = () => {
    if (editor.selection?.anchor.path[0])
      return editor.children[editor.selection?.anchor.path[0]];
    else return null;
  };
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav className="bg-slate-200 h-12  w-full px-12 flex justify-between items-center">
        <Link href="/">Pulth</Link>
        <div className="flex gap-4">
          <Link href="#">
            <div className="p-1.5 rounded-md  border border-slate-400">
              Login
            </div>
          </Link>
          <Link href="#">
            <div className="p-1.5 rounded-md  border border-slate-400">
              Register
            </div>
          </Link>
        </div>
      </nav>
      <main className="w-full p-5 sm:w-11/12 md:w-10/12 lg:w-9/12 xl:w-8/12 mx-auto ">
        <Slate editor={editor} value={initialValue}>
          <Editable
            renderElement={BlockRenderer}
            onKeyDown={(event) => {
              if (event.key === "." && event.ctrlKey) {
                event.preventDefault();
                // Determine whether any of the currently selected blocks are code blocks.
                const [match] = Editor.nodes(editor, {
                  match: (n) => Editor.isBlock(editor, n) && n.type === "code",
                });
                // Toggle the block type depending on whether there's already a match.
                Transforms.setNodes(
                  editor,
                  { type: match ? ElementTypes.Paragraph : ElementTypes.Code },
                  { match: (n) => Editor.isBlock(editor, n) }
                );
              }
            }}
          >
            <Toolbar />
          </Editable>
        </Slate>
      </main>
      <button
        onClick={() => {
          let value = getDocument();
          console.log(value);
        }}
      >
        Selection
      </button>
    </>
  );
};
const Toolbar = () => {
  const editor = useSlate();
  return (
    <div>
      {/* <button onClick={isBoldActive(editor)}>B</button> */}
      <button>B</button>
      {/* <button onClick={isItalicActive(editor)}>I</button> */}
      <button>I</button>
    </div>
  );
};

export default EditorPage;
