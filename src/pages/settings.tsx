import type { NextPage } from "next";

import Head from "next/head";
import Link from "next/link";

import { useEffect, useReducer, useState } from "react";
import { useSession, signIn } from "next-auth/react";
import { useRouter } from "next/router";

import DashboardLayout from "~/components/layouts/gridDashboard";
import Image from "next/image";

import { Tab } from "@headlessui/react";
import { Switch } from "@headlessui/react";
import ChevronLeftIcon from "@heroicons/react/24/solid/ChevronLeftIcon";
import { api } from "~/utils/api";
import Loading from "~/components/Loading";

const Settings: NextPage = () => {
  const router = useRouter();

  const { data: userData, status } = useSession({
    required: true,
    onUnauthenticated: () => signIn(),
  });

  const [textareaCount, setTextareaCount] = useState(0);
  const [selectedIndex, setSelectedIndex] = useState(0);
  interface userState {
    name: string;
    email: string;
    image: string;
    description: string;
  }

  interface userAction {
    payload: Partial<userState>;
  }

  const userReducer = (state: userState, action: userAction): userState => {
    const { payload } = action;
    console.log(payload);
    return { ...state, ...payload };
  };

  const [state, dispatch] = useReducer(userReducer, {
    name: "",
    email: "",
    image: "",
    description: "",
  });

  const { data: settingsData, refetch: settingsDataRefetch } =
    api.auth.getSettings.useQuery();

  const currentDesc = settingsData?.description;

  const updateUserMutation = api.auth.updateSettings.useMutation();

  useEffect(() => {
    if (status == "authenticated" && userData.user) {
      const { name, email, image } = userData.user;
      console.log(email);
      const payload = {
        name: name || undefined,
        email: email || undefined,
        image: image || undefined,
        description: currentDesc || undefined,
      };
      dispatch({
        payload: payload,
      });
    }
  }, [status, userData, currentDesc]);

  if (status == "loading")
    return (
      <DashboardLayout>
        <Loading className="m-10 h-12 w-12 border-2"></Loading>
      </DashboardLayout>
    );

  return (
    <DashboardLayout>
      <Head>
        <title>Settings - Pulth </title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="block p-5 md:hidden">
        <Tab.Group selectedIndex={selectedIndex} onChange={setSelectedIndex}>
          <div className="mb-5 flex items-center gap-x-2">
            <ChevronLeftIcon
              onClick={() => router.back()}
              className="mt-1 h-7 w-7 cursor-pointer"
            ></ChevronLeftIcon>
            <h1 className="text-2xl font-bold">Settings</h1>
          </div>
          <Tab.List className="flex w-full justify-between border-b-2">
            <Tab
              className={`${
                selectedIndex == 0 ? "border-indigo-600 text-indigo-700" : ""
              }  w-1/3 translate-y-px border-b-2`}
            >
              General
            </Tab>
          </Tab.List>
          <Tab.Panels className="py-5">
            <Tab.Panel className="flex flex-col items-center gap-y-7">
              <div className="self-start">
                <h1 className="text-xl font-semibold">General</h1>
                <p className="text-gray-500">
                  This section is for your profile information. All these infos
                  are able to seen in public.
                </p>
              </div>
              <div className="flex flex-col gap-y-3">
                <Image
                  // src={user?.image || "/default_profile.jpg"}
                  src={state.image || "/default_profile.jpg"}
                  alt="profilePic"
                  width={135}
                  height={135}
                  className="rounded-full"
                ></Image>
                <button className="block rounded-lg bg-indigo-600 p-2 font-semibold text-white">
                  Change Image
                </button>
              </div>
              <div className="flex w-full flex-col gap-y-3">
                <div>
                  <p>Name</p>
                  <input
                    className="w-full rounded-lg border-2 p-2 focus:border-indigo-600 focus:outline-none"
                    defaultValue={state.name}
                    value={state.name}
                    onChange={(e) =>
                      dispatch({ payload: { name: e.target.value } })
                    }
                  />
                </div>
                <div>
                  <p>Email</p>
                  <input
                    className="w-full rounded-lg border-2 p-2 disabled:bg-gray-200/50"
                    disabled
                    defaultValue={state.email}
                    value={state.email}
                    // value={user?.email?.toString()}
                    onChange={(e) =>
                      dispatch({ payload: { email: e.target.value } })
                    }
                  />
                  <p className="ml-1 text-xs italic text-gray-500">
                    Disabled because of sign up method
                  </p>
                </div>
                <div className="w-full">
                  <p>About</p>
                  <textarea
                    className="h-32 max-h-56 min-h-[44px] w-full rounded-lg border-2 p-1"
                    onChange={(e) => {
                      setTextareaCount(e.target.value.length);
                      dispatch({ payload: { description: e.target.value } });
                    }}
                    defaultValue={state.description}
                    value={state.description}
                    maxLength={350}
                  ></textarea>
                  <p className="ml-1 text-xs italic text-gray-500">
                    {textareaCount} / 350
                  </p>
                </div>
              </div>
              <div className="flex w-full flex-col gap-y-6 self-start">
                <div>
                  <h3 className="mt-10 text-xl font-semibold">Management</h3>
                  <p className=" text-gray-500">
                    You can manage your account with this section. Nothing here
                    will be displayed.
                  </p>
                </div>
                <div className="flex w-full flex-col">
                  <div className="mt-8 flex justify-center gap-x-5">
                    <button
                      onClick={() => {
                        updateUserMutation.mutate({
                          name: state.name,
                          // TODO: add email change
                          // email: state.email,
                          description: state.description,
                          // TODO: add image change
                          // image: state.image,
                        });
                        settingsDataRefetch();
                      }}
                      className="rounded-lg bg-indigo-600 p-2 font-semibold text-white"
                    >
                      Save Settings
                    </button>
                    <button
                      // className={`${
                      //   userData.data?.description === textDescription &&
                      //   userData.data?.name === userName
                      //     ? "text-red-500 cursor-default"
                      //     : "bg-red-500 text-white cursor-pointer"
                      // }  rounded-md p-2 transition-colors border border-red-500`}
                      className={`cursor-pointer rounded-md border   border-red-500 bg-red-500 p-2 text-white transition-colors`}
                      onClick={() => {
                        dispatch({
                          payload: {
                            name: userData.user?.name!,
                            email: userData.user?.email!,
                            description: currentDesc!,
                            image: userData.user?.image!,
                          },
                        });
                        settingsDataRefetch();
                      }}
                    >
                      Reset Changes
                    </button>
                  </div>
                </div>
              </div>
            </Tab.Panel>
            {/* <Tab.Panel>Security</Tab.Panel>
            <Tab.Panel>Billing</Tab.Panel> */}
          </Tab.Panels>
        </Tab.Group>
      </div>
      <div className="hidden flex-col gap-y-10 p-10 md:flex">
        <div className="flex items-center gap-x-5">
          <ChevronLeftIcon
            onClick={() => router.back()}
            className="mt-1 h-9 w-9 cursor-pointer"
          ></ChevronLeftIcon>
          <h1 className="text-4xl font-bold">Settings</h1>
        </div>
        <div className="relative flex gap-x-5 border-b-2">
          <div className="box-border translate-y-[1.5px] cursor-pointer border-b-2 border-indigo-600 px-2 pb-2 text-indigo-700">
            General
          </div>
          {/* <div className="pb-2 px-2 translate-y-px cursor-pointer">
            Security
          </div>
          <div className="pb-2 px-2 translate-y-px cursor-pointer">Billing</div> */}
        </div>
        <div className="flex flex-col">
          <div>
            <h3 className="text-xl font-semibold">Profile</h3>
            <p className=" text-gray-500">
              This section is for your profile information. All these infos are
              able to seen in public.
            </p>
          </div>
          <div className="mt-5 flex justify-between">
            <div className="flex w-4/5 flex-col justify-center gap-y-5">
              <div>
                <p>Name</p>
                <input
                  className="w-full rounded-lg border-2 p-2 focus:border-indigo-600 focus:outline-none"
                  defaultValue={state.name}
                  value={state.name}
                  onChange={(e) =>
                    dispatch({ payload: { name: e.target.value } })
                  }
                />
              </div>
              <div>
                <p>Email</p>
                <input
                  className="w-full rounded-lg border-2 p-2 disabled:bg-gray-200/50"
                  disabled
                  defaultValue={state.email}
                  value={state.email}
                  onChange={(e) =>
                    dispatch({ payload: { email: e.target.value } })
                  }
                />
                <p className="ml-1 text-xs italic text-gray-500">
                  Disabled because of sign up method
                </p>
              </div>
            </div>
            <div className="relative cursor-pointer">
              <div className="absolute z-20 flex h-44 w-full items-center justify-center rounded-full bg-black text-white opacity-0 hover:opacity-60">
                Change Image
              </div>
              <Image
                src={state.image || "/default_profile.jpg"}
                alt="profilePic"
                width={176}
                height={176}
                className="rounded-full"
              ></Image>
            </div>
          </div>
          <div className="mt-5 flex w-full justify-between gap-x-7">
            <div className="w-full">
              <p>About</p>
              <textarea
                className="h-32 max-h-56 min-h-[44px] w-full rounded-lg border-2 p-2 focus:border-indigo-600 focus:outline-none"
                onChange={(e) => {
                  setTextareaCount(e.target.value.length);

                  dispatch({ payload: { description: e.target.value } });
                }}
                defaultValue={state.description}
                value={state.description}
                maxLength={350}
              ></textarea>
              <p className="ml-1 text-xs italic text-gray-500">
                {textareaCount} / 350
              </p>
            </div>
            {/* <div>
              <p>Title</p>
              <input className="border-2 rounded-lg p-2" />
              <p className="text-gray-500 text-xs italic ml-1">Teachers Only</p>
            </div> */}
          </div>
          <div className="mt-5 flex gap-x-2">
            <button
              className="flex items-center gap-x-2 rounded-md bg-indigo-500 p-2 text-white"
              onClick={() => {
                updateUserMutation.mutate({
                  name: state.name,
                  // TODO: add email change
                  // email: state.email,
                  description: state.description,
                  // TODO: add image change
                  // image: state.image,
                });
              }}
            >
              <Loading
                className={`${
                  updateUserMutation.isLoading ? "" : "hidden"
                } h-4 w-4 border-2`}
              />
              Save Changes
            </button>
            <button
              // className={`${
              //   userData.data?.description === textDescription &&
              //   userData.data?.name === userName
              //     ? "text-red-500 cursor-default"
              //     : "bg-red-500 text-white cursor-pointer"
              // }  rounded-md p-2 transition-colors border border-red-500`}
              className={`cursor-pointer rounded-md border   border-red-500 bg-red-500 p-2 text-white transition-colors`}
              onClick={() => {
                dispatch({
                  payload: {
                    name: userData.user?.name!,
                    email: userData.user?.email!,
                    description: currentDesc!,
                    image: userData.user?.image!,
                  },
                });
                settingsDataRefetch();
              }}
            >
              Reset Changes
            </button>
          </div>
          {/* <div>
            <h3 className="font-semibold text-xl mt-10">Management</h3>
            <p className=" text-gray-500">
              You can manage your account with this section. Nothing here will
              be displayed.
            </p>
            <div className="flex flex-col mt-5 gap-y-5">
              <div className="flex justify-between items-center">
                <div>
                  <h4 className="text-lg font-medium">Recom Engine</h4>
                  <p className="text-gray-500">
                    Allow Recom Engine to collect my data for personal
                    recomendations
                  </p>
                </div>
                <Switch
                  checked={recomEnabled}
                  onChange={() => setRecomEnabled(!recomEnabled)}
                  className={`${recomEnabled ? "bg-indigo-600" : "bg-slate-400"}
                    relative flex h-7 w-14 cursor-pointer rounded-full border-2 transition-colors duration-200 box-content ease-in-out 
                  `}
                >
                  <span className="sr-only">Toggle Recom Engine</span>
                  <span
                    aria-hidden="true"
                    className={`${
                      recomEnabled ? "translate-x-full" : "translate-x-0"
                    }
                      pointer-events-none inline-block h-7 w-7 transform rounded-full bg-white shadow-sm border-2 ring-0 transition duration-200 ease-in-out`}
                  />
                </Switch>
              </div>
            </div>
          </div> */}
        </div>
      </div>
    </DashboardLayout>
  );
};

export default Settings;
